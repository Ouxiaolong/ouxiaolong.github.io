<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>哈佛图书馆的二十条训言</title>
    <url>/2020/04/18/%E5%93%88%E4%BD%9B%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%9A%84%E4%BA%8C%E5%8D%81%E6%9D%A1%E8%AE%AD%E8%A8%80/</url>
    <content><![CDATA[<p><font face="黑体" size="4" color="#DD0000">1、此刻打盹，你将做梦；而此刻学习，你将圆梦。</font><br>（This moment will nap, you will have a dream; But this moment study,you will interpret a dream. ）</p>
<p><font face="黑体" size="4" color="#DD0000">2、我荒废的今日，正是昨日殒身之人祈求的明日。</font><br>（I leave uncultivated today, was precisely yesterday perishes tomorrow which person of the body implored.）</p>
<p><font face="黑体" size="4" color="#DD0000">3、觉得为时已晚的时候，恰恰是最早的时候。</font><br>（Thought is already is late, exactly is the earliest time.）</p>
<p><font face="黑体" size="4" color="#DD0000">4、勿将今日之事拖到明日。</font><br>（Not matter of the today will drag tomorrow. ）</p>
<p><font face="黑体" size="4" color="#DD0000">5、学习时的苦痛是暂时的，未学到的痛苦是终生的。</font><br>（Time the study pain is temporary, has not learned the pain islife-long. ）</p>
<p><font face="黑体" size="4" color="#DD0000">6、学习这件事，不是缺乏时间，而是缺乏努力。</font><br>（Studies this matter, lacks the time, but is lacks diligently.）</p>
<p><font face="黑体" size="4" color="#DD0000">7、幸福或许不排名次，但成功必排名次。</font><br>（Perhaps happiness does not arrange the position, but succeeds must arrange the position. ）</p>
<p><font face="黑体" size="4" color="#DD0000">8、学习并不是人生的全部。但，既然连人生的一部分——学习也无法征服，还能做什么呢？</font><br>（The study certainly is not the life complete. But, since continually life part of-studies also is unable to conquer, what butalso can make?）</p>
<p><font face="黑体" size="4" color="#DD0000">9、请享受无法回避的痛苦。</font><br>（Please enjoy the pain which is unable to avoid.）</p>
<p><font face="黑体" size="4" color="#DD0000">10、只有比别人更早、更勤奋地努力，才能尝到成功的滋味。</font><br>（only has compared to the others early, diligently diligently, canfeel the successful taste.）</p>
<p><font face="黑体" size="4" color="#DD0000">11、谁也不能随随便便成功，它来自彻底的自我管理和毅力。</font><br>（Nobody can casually succeed, it comes from the thoroughself-control and the will. ）</p>
<p><font face="黑体" size="4" color="#DD0000">12、时间在流逝。</font>（The time is passing. ）</p>
<p><font face="黑体" size="4" color="#DD0000">13、现在流的口水，将成为明天的眼泪。</font><br>（Now drips the saliva, will become tomorrow the tear.）</p>
<p><font face="黑体" size="4" color="#DD0000">14、狗一样地学，绅士一样地玩。</font><br>（The dog equally study, the gentleman equally plays.）</p>
<p><font face="黑体" size="4" color="#DD0000">15、今天不走，明天要跑。</font><br>（Today does not walk, will have to run tomorrow.）</p>
<p><font face="黑体" size="4" color="#DD0000">16、投资未来的人是，忠于现实的人。</font><br>（The investment future person will be, will be loyal to the realityperson. ）</p>
<p><font face="黑体" size="4" color="#DD0000">17、教育程度代表收入。</font><br>（The education level represents the income. ）</p>
<p><font face="黑体" size="4" color="#DD0000">18、一天过完，不会再来。</font><br>（one day, has not been able again to come. ）</p>
<p><font face="黑体" size="4" color="#DD0000">19、即使现在，对手也不停地翻动书页。</font><br>（Even if the present, the match does not stop changes the page.）</p>
<p><font face="黑体" size="4" color="#DD0000">20、没有艰辛，便无所得。</font><br>(Has not been difficult, then does not have attains’.)</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>那些让你感动的句子</title>
    <url>/2020/04/18/%E9%82%A3%E4%BA%9B%E8%AE%A9%E4%BD%A0%E6%84%9F%E5%8A%A8%E7%9A%84%E5%8F%A5%E5%AD%90/</url>
    <content><![CDATA[<h3 id="技巧一：小细节的刻画-内心的妄想"><a href="#技巧一：小细节的刻画-内心的妄想" class="headerlink" title="技巧一：小细节的刻画+内心的妄想"></a>技巧一：小细节的刻画+内心的妄想</h3><hr>
<p>你的酒窝里没有酒</p>
<p>可你一笑</p>
<p>我却醉了</p>
<hr>
<p>第一次看见你嘴角的弧度，</p>
<p>就已擅自在脑海里，</p>
<p>和你厮守一生，</p>
<hr>
<p>你的影子好嚣张</p>
<p>不请自来</p>
<p>就闯进我的心里</p>
<hr>
<p>蓄谋已久的十几次擦肩而过</p>
<p>只为在你的瞳孔里</p>
<p>留下我的影子</p>
<hr>
<p>创作方法：<br>先描写对方一个唯美的小细节（如酒窝、嘴角、瞳孔等等），然后再写自己被这些细节打动的状态（一般是作者自己近乎痴迷的妄想）。我们也可以按照这种模式写句子，效果炒鸡棒。</p>
<p>ps：文案1来自江小白的走心文案。</p>
<h3 id="技巧二：暗示法"><a href="#技巧二：暗示法" class="headerlink" title="技巧二：暗示法"></a>技巧二：暗示法</h3><hr>
<p>为了这次相聚</p>
<p>我连见面的呼吸</p>
<p>都曾反复练习</p>
<hr>
<p>我无时无刻不在看你</p>
<p>除了你看我的时候</p>
<hr>
<p>创作方法：<br>不直接说出爱，而是通过写出细微而刻意的行为，暗示出爱。最适合刻画暗恋的时候使用，虐心指数无穷大。</p>
<p>ps：文案1来自于《漂洋过海来爱你》。</p>
<h3 id="技巧三：写出“想太多”"><a href="#技巧三：写出“想太多”" class="headerlink" title="技巧三：写出“想太多”"></a>技巧三：写出“想太多”</h3><hr>
<p>每次跟她聊完天，</p>
<p>总觉得发挥失常。</p>
<hr>
<p>隔壁班的那个男生，</p>
<p>怎么还没经过我的窗前？</p>
<hr>
<p>你在我的梦里，</p>
<p>来来去去，</p>
<p>是不是对我有意思？</p>
<hr>
<p>创作方法：<br>直接写出内心的“想太多”，在暗恋一个人的时候，我们往往会有各种“想太多”的臆想，把它写出来，是激起共鸣最简单的方法之一。</p>
<p>ps：文案1来自于知友，文案2出自《童年》。</p>
<h3 id="技巧四：衬托法，以美景美物衬托恋人相遇"><a href="#技巧四：衬托法，以美景美物衬托恋人相遇" class="headerlink" title="技巧四：衬托法，以美景美物衬托恋人相遇"></a>技巧四：衬托法，以美景美物衬托恋人相遇</h3><hr>
<p>最美的不是下雨天 </p>
<p>而是与你一起躲过雨的屋檐</p>
<hr>
<p>天青色等烟雨/</p>
<p>而我/</p>
<p>在等你/</p>
<hr>
<p>若逢新雪初霁，满月当空 </p>
<p>下面平铺着皓影，上面流转着亮银 </p>
<p>而你带笑地向我走来 </p>
<p>月色和雪色之间，你是第三种绝色 </p>
<hr>
<p>创作方法：<br>要写人，先写景。先把绝美的景物写出来，再笔锋一转，去写人，一下子就突出了人胜于景。而且文字里同时出现美景美人，又有情景交融的效果，让人读起来特别有画面感，文采功底好的童鞋可以多试试这种方法，</p>
<p>ps：这种方法是名家大师的常用手法，文案1、2出自方文山笔下，文案3来自余光中的《绝色》。</p>
<h3 id="技巧五：爱的窥探"><a href="#技巧五：爱的窥探" class="headerlink" title="技巧五：爱的窥探"></a>技巧五：爱的窥探</h3><hr>
<p>你的每一条动态</p>
<p>都是抛给我的阅读题</p>
<p>我吃力地理解分析</p>
<p>推测你的苦乐悲喜</p>
<hr>
<p>语文只考了50分的我</p>
<p>花了3小时</p>
<p>一字一句，看完你的536条微博</p>
<hr>
<p>看着你</p>
<p>和别的女孩说说笑笑</p>
<p>明明很吃醋</p>
<p>却发现自己没有资格</p>
<hr>
<p>创作方法：<br>把对恋人的各种动态的窥探（微信微博空间/现实等等）直接写出来。这种写法以小见大，句子都是大白话，但很容易触动人，即使是没文学功底的童鞋，都可以轻松来几句。</p>
<h3 id="技巧六：被爱改变"><a href="#技巧六：被爱改变" class="headerlink" title="技巧六：被爱改变"></a>技巧六：被爱改变</h3><hr>
<p>我爱你</p>
<p>不光因为你的样子</p>
<p>还因为</p>
<p>和你在一起时</p>
<p>我的样子</p>
<hr>
<p>以前</p>
<p>没有拆不开的快递</p>
<p>有你以后</p>
<p>总有拧不动的瓶盖</p>
<hr>
<p>明明是你偷走了我的心</p>
<p>我却像小偷一样</p>
<p>连跟你说话都小心翼翼</p>
<hr>
<p>创作方法：<br>把有爱以后，自己因爱而产生的改变写出来。这种写法很容易从生活中取材，因为当爱上一个人后，我们很多行为都会发生变化，例如：变得非常患得患失，女生会撒娇到连瓶盖都拧不动了，手机整晚都不敢静音……这种写法画面感较强，可以一下子激发读者的联想。</p>
<p>ps：文案1出自罗伊•克里夫特。</p>
<h3 id="技巧七：夸张法"><a href="#技巧七：夸张法" class="headerlink" title="技巧七：夸张法"></a>技巧七：夸张法</h3><hr>
<p>初恋是一个人的兵荒马乱<br>             —张嘉佳</p>
<hr>
<p>山无陵，天地合</p>
<p>乃敢与君绝<br>            —《上邪》</p>
<hr>
<p>我爱你</p>
<p>海枯石烂</p>
<p>至死不渝<br>           —《 各种爱情剧 》</p>
<hr>
<p>创作方法:<br>选定一个非常夸张的词语来形容爱（兵荒马乱、山无陵、海枯石烂等等），越夸张越能突显爱的轰轰烈烈<br>需要注意的是，夸张法用得太泛滥了，尤其是各种狗血爱情剧。太过常见得句子，很难让人有所触动。大家要慎用，除非有张嘉佳那种水平。</p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个豁达的人</title>
    <url>/2020/04/18/Article/%E5%81%9A%E4%B8%80%E4%B8%AA%E8%B1%81%E8%BE%BE%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<font face="楷体" size="5">

人生就像一首诗，又甜美的浪漫也有严酷的现实；人生就像一首歌，有高亢的欢愉也有低回的沉郁；人生就像五彩缤纷的舞台，有众星拱月的主角也有默默无闻的配角。面对世事的的沉浮想要“胜似闲庭信步”，就要有豁达的襟怀。

豁达的人有健康积极的梦想和结实的躯体，也不会生活的琐碎的小事所困扰。在他人面前，你也不必为说错一句话而担惊受怕，也不必为做错一件事而惴惴不安。

豁达的人不会文过饰非，及至于暗箭伤人，光明磊落，热爱生命的人也被别人所热爱。尖刻，势力，贪婪与豁达的人无缘。

豁达的人是生存的艺术。能够百折不饶从心奋起是豁达；不为讥讽是豁达，不畏打击，陷害，义无反顾，走自己的路是豁达；勇于去承担自己的过错是豁达；善于发现别人的长处，调整自己并改善不足是豁达。

狭隘的人如何变得豁达呢？首先要摒弃世俗杂念；其次要善于体谅他人，多和一些诚恳的人交朋友，从他们的身上学为人处世之道。总之要成为豁达的人，只要退却浮躁和任性，许多美好的就会变得清晰透明，许多幸福才会变得简单而触手可及，只有这样，快乐才会如影相随！

2011.04.08

</font>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>忆恩师</title>
    <url>/2020/04/18/Article/%E5%BF%86%E6%81%A9%E5%B8%88/</url>
    <content><![CDATA[<font face="楷体" size="5">

## 忆恩师 ##

--记一位对我影响深远的小学老师

去年春节，到父母那边去过年。无意中我路过曾经在那里读过三年的小学的下水小学。顿时，记忆把我拉回了十几年前，我想起了我的启蒙老师--小俞老师。

回想起我十几年的求学生活，所到的学校也不下十所吧！所遇到的老师也不下百位，有的只上过一两节课，有的也只有几个星期，也有超过一年的，三年以上的，我想了一下，恐怕是少之又少吧。在我的记忆的长河里，对我映像
较深的一位就数我的小学老师--小俞老师。

由于家庭的原因，我不得不离开家乡到异地求学，结果又在冥冥之中我有成为了小俞老师的学生。历经两年的小学教育，恐怕她是最了解我的一位恩师吧！对我的启迪也最深远！现在回想起来真是感动不已。虽吾尽力寻之，可天意弄人，寻不得以，为表感恩，特做此篇以表万一。

小俞老师爱心广被，有教无类。不管同学的美丑，善恶，家庭的好坏，她都一视同仁，同样关心(我是一名借读生，浙江人是很排斥外地人的，但她并不把我当外地人，同等对待).在我的印象里，大凡严厉的老师都是手拿戒尺，在同学们不听话时拍打手心，经常把同学们搞得凄凄惨惨，叫苦连天。虽然她也一样很严格，但她管教的方式完全不同。在她的影响下，同学们都很规矩，与老师建立共同的默契。因此，我们班是年级最好的，也是纪律最好的班！
由于学校条件有限，上幼儿园也没学到什么。有的家里困难的，直接就上一年级了。对于这样一群什么都不懂得小学生来说，尽管小学只学语文、数学，也是没有几个感兴趣。我们脑子里想的也只有玩，根本没有几个想学，还别说学好了。因此小俞老师除了激励程度好的学习好的同学，对于程度差的同学，便施了个别补教措施，，也为我的人生奠定了坚实的基础。小俞老师上课也与其他老师有很大差别。她首先讲清楚，学生听明白，再让学生根据学生的情况一一辅导（我们班只有三十几个学生，不像现在一个班少则只有六七个，多则八九个）。她引导我们如何读题、审题、答题。每一个细节她都尽力考虑。

小学时也只有语文和数学是必修课，而数学有时每个老师都极力想提高的一门（小学多半是班主任兼语文数学老师），所以每周她都会选两天最后第四节课练习。她向来都是自主命题，并且自己手工复印。一上课她就发试卷，我们就认真完成，谁先做完，就拿给她批。答得好的就给100分。对于这些答的又快有好的同学来说，可以提前吃午饭，或者在教室外玩耍。当然，这就是她善于激励的表现了。做错了同学，她指出错误，再让其修改。答得好的也批一个100分，这是她最可贵的地方，也是她与其他老师最大的不同之处了。因此，我能看到我练习本上的100分，那恐怕就是我童年最美好的记忆吧！

至于语文，她也不马虎，教我们认每一字，发每一个音。并要求我们到她那里背诵课文，并且在我们背完后给我们的课文上写个“背”字。对于像造句这样的练习，我们当然是不能少的。作为一个小学生，说好每一句话也不是件易事，还别说写好作文。她总是要求我们写一行空一行，以便用来她批改，纠正。每次作文如此，每篇作文如此。
这么多年了，我每每想起这些，感觉都是那么的温暖，那样的亲切。虽然我们相隔甚远，但是她对我的教导和关怀，我将时刻铭记于心，永生难忘。

2012.02.29晚


</font>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>耐得寂寞，拥得繁华——孤独是你的必修课（转）</title>
    <url>/2020/04/18/Article/%E8%80%90%E5%BE%97%E5%AF%82%E5%AF%9E%EF%BC%8C%E6%8B%A5%E5%BE%97%E7%B9%81%E5%8D%8E%E2%80%94%E2%80%94%E5%AD%A4%E7%8B%AC%E6%98%AF%E4%BD%A0%E7%9A%84%E5%BF%85%E4%BF%AE%E8%AF%BE/</url>
    <content><![CDATA[<font face="楷体" size="5" color="#DD00DD">
生活不可能像你想象得那么好，但也不会像你想象得那么糟。我觉得人的脆弱和坚强都超乎自己的想象。有时，我可能脆弱得一句话就泪流满面，有时，也发现自己咬着牙走了很长的路。——莫泊桑

<center>（一）</center>
但以这样的一句话作为开头，看高木直子的《一个人住第五年》，那时觉得那样的生活根本不可能发生在我身上，连吃饭都要人陪着的我无法忍受一个人吃饭的感觉。所以后来，有很长的一段时间里我都没能适应一个人吃饭，一个人旅行，现在想想其实也没什么，这个世界运转速度那么快，没有人会在意你是不是一个人。以至于后来一个朋友问我是不是也得了社交恐惧症，我笑笑，其实不是，只是自己慢慢地变得懒了，懒得去经营一份感情，至于朋友，有那么几个就足够了，有些人天天在一起，也不见得是朋友。

好像这样久了，倒是会忘记开始遇到的困难，渐渐地变成自己生活的旁观者，看着生活平静地流淌。都说人是慢慢成长的，其实不是，人是瞬间长大的，就像是突然间沉淀一般，突然不会谈恋爱了或者说不想谈恋爱了，一个人生活单一却也不会觉得无聊，即便很多时候还是会迷茫却也不会觉得烦躁了。

去年的今天我在不一样的城市，背着不一样的书包，留着不一样的发型，走着不一样的路，想着不一样的事情，有着不一样的心思，爱着不一样的人。谁说改变需要十年呢。

<center>（二）</center>
身边的牛人倒是不少，像是神抵一样的存在，我也只是羡慕想着反正自己也不会变成那样的人，直到有一天一个学长跟我聊起来，才知道原来他也有看不进去书的时候，也有写论文写到想撞墙的时候，我们都忘了他们是用怎么样的一个代价才换取来了这样的一个人生。他说，如果你想要去实现梦想，孤独是你的必修课。如果不能沉下心来，就没有办法去实现它，因为那绝对不是一件容易的事情，孤独能让你更坚强，你必须找到自己的生活节奏。

有一个朋友喜欢每天喝一点酒，看一部电影然后准时睡觉；住在旁边的英国人神出鬼没，有的时候早上才睡，有的时候天刚黑就睡了；隔壁楼的一个男生每天天不亮就起来跑步，往往那个时候我才刚打算睡。

最近迷上一个人到处走，算不上旅行只是周围的城市走一遭，倒也不会花上太多时间准备，提起包就走了。我不会带上相机只是有兴致了拿出手机拍一拍，音乐倒是我走到哪里都不能丢的东西，只有音乐，能让看似漫长的等待变成曼妙的旅程，似乎自己跟整个世界都没有关系，只想当一片没有名字的云，徜徉在不知道名字的风景里。

正如上面说的，曾经无法想象一个人吃饭的感觉，同样的，我也不会去想象一个人去坐公交车是什么样的感觉。谁知道没过多久我就习惯了一个人坐车去学校，我离学校比较远所以每次上车的时候还没有多少人，坐最后的几排。有的时候看着窗外发呆，什么都想却又不知道自己在想什么。我们都会找到自己的生活节奏，然后沉溺其中无法自拔。

<center>（三）</center>
很长一段时间里我都没有去书店，觉得那种“每个星期读一本书”对于我来讲是太遥远的东西。直到有一天我陪朋友去书店，他是一个买书就不会停的人，我也就跟着买了几本。回到家里看微博人人又觉得心里空拉拉的，索性就拿起书来看，也是在那一天我才发现，其实每个星期看一本书没那么难，那天我一下子把书看完，才觉得这样子的生活是充实的。

要么读书，要么旅行，身体和灵魂，必须有一个在路上。

我告诉自己现实容不得你拖延，拖延只会让我变得更焦虑而已，所以刚开始的时候我规定自己每天提早上床半小时，看上几十页书，很快就变成习惯了。有的时候我不得不感叹，如果真的去做一件事情的话，那么这件事情没有那么难。当你真的想要做一件事情的时候，整个世界都会来协助你，就是这种感觉。

一个朋友说，只要出发，就能到达，你不出发，就哪里也去不了。如果你不能沉下心来，就什么也做不到。出发永远是最有意义的事，去做就是了。一本书买了不看只是几张纸，公开课下了不看也只是一堆数据，不去看就没有任何意义，反而徒增焦虑，行动力才是最关键的。

<center>（四）</center>
你也许也是这样，当你渴望找个人交谈的时候，你们却没有谈什么。于是发现有些事情是不能告诉别人的，有些事情是不必告诉别人的，有些事情是根本没有办法告诉别人的，而有些事情即使告诉了别人，你也会马上后悔。那么最好的办法就是静下来，真正能平静自己的只有自己。

没有人能免得了孤独，与其逃避它不如面对它。孤独并不是一件那么糟糕的事情，与嘈杂相比，一个人生活倒显得自得地多，倒也可以变成一种享受。或许至少需要那么一段时间，几年或几个月，一个人生活，不然怎么能找到自己的节奏知道自己想要什么。这是属于你自己的东西，是你的一部分，你听音乐时，坐地铁时，一个人走在马路上时，它就会流淌出来，让我觉得这个世界似乎在以另外一种形式存在着，我能够清晰地听到自己。

我们都生活在一个不那么如意的世界，当乌云密布我们就摇曳，但阳光总有一天会到来，等阳光照到你的时候，记得开出自己的花就行了，那个你与生俱来的梦想。有的时候梦想很远，有的时候梦想很近，但它总会实现的。我想一个人最好的样子就是平静一点，哪怕一个人生活，穿越一个又一个城市，走过一个又一条街道，仰望一片又一片天空，见证一次又一次别离。

即便世界与我为敌，只要心还透明，就能折射希望。

**后记**
与你有关的人太多，所以还不如做一个你想要做的人，人生都太短暂，去疯去爱去孤单一场，真正能平静自己的只有自己。人都是孤独的，孤独不可怕，可怕的是惧怕孤独。想要摘星星的孩子，孤独是我们的必修课，我不怕自己努力了不优秀，我只怕比我优秀的人比我更努力。

如果你总是被外界环境或别人的话左右，这辈子只能活得疲于奔命。想好了你想要的，就要心定。不要担心你此时此刻的付出得不到回报，别再花时间等待天降好运或者遇到贵人，用心做人，用爱做事，你想要的，岁月统统会给你。每一个优秀的人，都有一段沉默的时光。那一段时光，是付出了很多努力，忍受了很多孤独和寂寞，不抱怨，不诉苦，以后说起时，连自己都能被感动的日子。在我看来，你正在经历这些日子，也一定会成为牛逼的自己。20岁后，进入人生的第二个十年，有理由相信改变发生，2016年，让时光按下和弦，奏响你的考研壮歌。

【注】此文摘自互联网，看到此文与我之心情极为相似，遂转与此！

</font>]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>诗意的春愁</title>
    <url>/2020/04/18/Article/%E8%AF%97%E6%84%8F%E7%9A%84%E6%98%A5%E6%84%81/</url>
    <content><![CDATA[<font face="楷体" size="5" color="#0000FF">
乍一看题目，似乎总觉得矛盾。春天万物复苏，青草绵绵，杨柳依依，百鸟争鸣，春思辗转。到处充满诗意的乐章，怎奈“桃花谢了春红，太匆匆”。春是美的，可美丽过后的却是凋谢。“苏门四学士”之一秦少游留下点点春愁：“韶华不为少年留。恨悠悠，几时休？飞絮落花时候一登楼。便做春江都是泪，流不尽，许多愁。”春色岁岁去，而人心中才会有不舍眷恋，，也才会有这诗意的春愁。

春是美的，在中国，不知有多少文人志士用他们手中的点点文墨勾勒了一幅幅美丽的春之图。是否还记得，在咿呀学语时，跟着父母念：“春眠不觉晓，处处闻啼鸟，夜来风雨声，花落知多少。”那时的我们都还不知道何为春，怎会明白这诗意的春天呢！上小学了，又跟这老师念：“天街小雨润如酥，草色要看近却无。最是一年春好处，绝胜烟柳满皇都”。寥寥几句，却耐人寻味可那时不知道，“酥”是什么味道，“润”是何种感觉。还老纳闷“草色眼看近却无”这似乎是很矛盾的。但只觉朗朗上口，奇妙无穷。那时怎知，几近透明的绿草，深深浅浅，远远近近，模模糊糊，只可远观而不可亵玩焉。就凭这点点春色那皇城之美景都不能牵动是人的心。后来了有背“碧玉妆成一树高，万条垂下绿丝绦。不知细叶谁裁出，二月春风似剪刀那是我们根本就不能想象这一幅唯美的春色图。更不知春风是如何把杨柳剪成那样婀娜模样。现在才知，一杯清茶，闲居柳下，看万丝绦，氤氲在柔软的时光里偶尔小泯一口清茶，闭上眼，享受这唯美的时刻，也是人生一大乐事。再后来啊，”几处早莺争暖树，谁家新燕啄春泥一切都是那么清新、自然，生机勃勃。香山居士写出了《忆江南》：“日出江花红胜火，春来江水绿如蓝。”江南的水，江南的花，那样惹人爱。“诗圣”也给我们留下了一幅画卷“江碧鸟逾白，山青花欲燃”江是碧的，山是青的，小鸟翩飞，到处充满诗情画意。春光乍现，梅尧臣出门一看：“野鹜眠岸有闲意，老树着花无丑枝”，多好啊，“老树着花”，难道我们不应该又所悟吗？

春风飞扬，到处生机勃勃，但要说到咏春，“四大才女”之一的易安居士的《如梦令》对春天的描述恐怕更显细腻吧“昨夜雨疏风骤，浓睡不消残酒。试问卷帘人，却道“海棠依旧”。知否，知否？应是绿肥红瘦。”情义之真，尽显纸上：“谁道闲情抛掷久？每到春来，惆怅还依旧。”我们走过多少个春天，只是我们粗疏了心情，年年春来，细细品味着唯美的春愁。

在中国，总是用春去秋来表达一年四季之变化，且一提及时光也总道“春秋”。春秋多变，“春风桃李花开日，秋雨梧桐花落时”这种沧桑巨变的心理落差，总让人心灵震撼吧，所以看到春日的逝去，总免不了会有淡淡的忧愁。春的到来就意味着生命的挫败，不觉觉就会让无数诗人诗兴大发带着些许惆怅和无限愁思。

冬还未归，春已悄悄而至，冯延巳说的极是：“春乍起，吹皱一池春水。”是那么形象，生动给人以身临其境之感。可国破家亡，春水荡漾在他眼里只是淡淡的皱波。“七绝圣手”王昌龄如此豪气，也竟能写的初这般《春怨》：“闺中少妇不知愁，春日凝装上翠楼，忽见陌头杨柳色，悔教夫婿觅封侯。”我想，这恐怕是诗人真实写照吧，诗人常住边塞，把大把青春用光，建功立业，追逐功利。而生命的情爱、愉悦是毫不曾留下，心中难免失落和悔恨吧。

说完春怨，现在谈谈春恨吧。亡国之君李煜写的《清平乐》道出了春恨之，“别来春半，触目愁肠断。砌下落梅如雪乱，拂了一身还满。 雁来音信无凭，路遥归梦难成，离恨恰如春草，更行更远还生。”冬去春来，雪去花来，在他眼中，春是惹人恨的，花是不让人怜的花落满身就掸掉，掸了之后又来。归期难成只有恨春无限绵长，那丝丝恨意就像春草一样悠远繁密。“恨”在李后主心里生根发芽缓缓缠绕着身心，挥之不去，又解脱不了。降宋之后，听到的是“帘外雨潺潺，春意阑珊”，一习寒风吹来，惊醒之余道“梦里不是身是客，一享贪欢”，只叹“流水落花春去也，天上人间”，“自是人生长恨水长东”。

春天不仅有画，还有很多声音，那就得说“春啼”了。常听说“子规啼血”，传说是蜀帝杜宇死后化作子规，他的舌头是红的，一开口就啼叫，就被误认为啼血。辛弃疾细听“细听春山杜宇啼，一声声是送行诗”。大凡杜鹃啼叫都只有一句“不如归去”。“惊梦觉，弄晴时，声声只道不如归”，还有“山前杜宇哀，山下杜鹃开。肠断声声血，即以何日回”，。诗人被他们叫的心里崩溃，回应道“天涯岂是无归意，忍耐归期未可期”。独在异乡，明月高悬，已然惊心，岂料还有那子规传来声声厉啼。让人不寒而栗。秦观在《踏莎行》里描述道：“雾失楼台，月迷津渡，桃园望断无寻出。可堪孤馆闭春寒，杜鹃声里斜阳暮。”此情此景，情何以堪？人在天涯，客居他乡，能听懂春啼，恐怕也是对这诗意的春愁的享受吧！

如今的我们终日忙绿，又有多少人停下脚步，驻足这诗意的春情呢。汉人说：“诗者，天地之心。”更何况是这唯美春之图呢！今日的我们岂能明白“年年岁岁花相似，岁岁年年人不同”，“一川烟草，满城风絮，梅子黄时雨”是否明白古人的春愁呢？古人给我们留下了一个个不朽的春天，勾勒了一幅幅诗意的春景图，难道我们就不能停下脚步，静下心来，品味这诗意的春愁呢？

</font>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第10章 GitHub删除repository</title>
    <url>/2020/04/18/Git/%E7%AC%AC10%E7%AB%A0%20GitHub%E5%88%A0%E9%99%A4repository/</url>
    <content><![CDATA[<p>在GitHub上创建一些项目后，有些可能不满意想要删除，接下来笔者就教大家如何删除项目。<br>首先进入github登录上自己的帐号，我们这里以Test为例，选择Test。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC10%E7%AB%A0%20GitHub%E5%88%A0%E9%99%A4repository/图1.png" alt="这里写图片描述"></p>
 <center>图1</center>

<p>进入Test项目页面，找到settings，点击settings。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC10%E7%AB%A0%20GitHub%E5%88%A0%E9%99%A4repository/图2.png" alt="这里写图片描述"></p>
 <center>图2</center>

<p>向下拉找到Delete this repositoty，点击它。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC10%E7%AB%A0%20GitHub%E5%88%A0%E9%99%A4repository/图3.png" alt="这里写图片描述"></p>
 <center>图3</center>

<p>弹出如下对话框，需要输入项目名称，这里是Test。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC10%E7%AB%A0%20GitHub%E5%88%A0%E9%99%A4repository/图4.png" alt="这里写图片描述"></p>
 <center>图4</center>

<p>点击下方按钮，删除成功转入到成功提示页面，再看主页已经没有了Test。当然删除谨慎额！删除前三思啊！朋友们！</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第1章 Git入门</title>
    <url>/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-1-Git介绍"><a href="#1-1-Git介绍" class="headerlink" title="1.1 Git介绍"></a>1.1 Git介绍</h2><h3 id="1-1-1-Git-简介"><a href="#1-1-1-Git-简介" class="headerlink" title="1.1.1 Git 简介"></a>1.1.1 Git 简介</h3><p>Linus的第二个伟大作品。2005年由于BitKeeper软件公司对Linux社区停止了免费使用权。Linus迫不得已自己开发了一个分布式的的版本控制工具，从而Git就诞生了。<br>目前使用Git作为版本控制的开源软件：Linux kernel、Android、jQuery、Ruby on Rails…<br>Eclipse 上使用Git的项目数量已经超过了使用SVN的仓库数。</p>
<h3 id="1-1-2-Git的优势"><a href="#1-1-2-Git的优势" class="headerlink" title="1.1.2 Git的优势"></a>1.1.2 Git的优势</h3><p>    分布式、离线操作<br>    每日工作备份<br>    异地协同工作<br>    现场版本控制<br>    避免引入辅助目录<br>    工作进度随时保存<br>    快</p>
<h3 id="1-1-3-Git的工作模型"><a href="#1-1-3-Git的工作模型" class="headerlink" title="1.1.3 Git的工作模型"></a>1.1.3 Git的工作模型</h3><p>    集中式协同的模型</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图1.png" alt="这里写图片描述"></p>
  <center>图1</center>

<p>    社交网络式分布模型</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图2.png" alt="这里写图片描述"></p>
  <center>图2</center>

<h3 id="1-1-4-Git基本交互流程图"><a href="#1-1-4-Git基本交互流程图" class="headerlink" title="1.1.4 Git基本交互流程图"></a>1.1.4 Git基本交互流程图</h3><p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图3.png" alt="这里写图片描述"></p>
  <center>图3</center>

<p>好了，下面进行安装。</p>
<h2 id="1-2-Git安装过程"><a href="#1-2-Git安装过程" class="headerlink" title="1.2 Git安装过程"></a>1.2 Git安装过程</h2><p>下载地址：<a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">https://git-scm.com/downloads/</a><br>1.双击安装程序“Git-2.12.0-64-bit”，如图所示。目前（2017-11-07）最新的版本是2.15.0，读者朋友要想使用最新的版本请自行下载。</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图4.png" alt="这里写图片描述"></p>
  <center>图4</center>

<p>2.点击“Next”，根据自己的情况，选择程序的安装目录。如图所示。</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图5.png" alt="这里写图片描述"></p>
  <center>图5</center>

<p>3.继续点击“Next”，显示截图如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图6.png" alt="这里写图片描述"></p>
  <center>图6</center>

<p>说明：<br>（1）图标组件(Addition icons) : 选择是否创建桌面快捷方式。<br>（2）桌面浏览(Windows Explorer integration) : 浏览源码的方法，使用bash 或者 使用Git GUI工具。<br>（3）关联配置文件 : 是否关联 git 配置文件, 该配置文件主要显示文本编辑器的样式。<br>（4）关联shell脚本文件 : 是否关联Bash命令行执行的脚本文件。<br>（5）使用TrueType编码 : 在命令行中是否使用TruthType编码, 该编码是微软和苹果公司制定的通用编码。<br>4.选择完之后，点击“Next”，显示截图如下：</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图7.png" alt="这里写图片描述">&lt;</p>
  <center>图7</center>

<p>开始菜单快捷方式目录：设置开始菜单中快捷方式的目录名称, 也可以选择不在开始菜单中创建快捷方式。<br>5.点击“Next”，显示截图如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图8.png" alt="这里写图片描述"></p>
  <center>图8</center>

<p>设置环境变量<br>选择使用什么样的命令行工具，一般情况下我们默认使用Git Bash即可：<br>（1）Git自带：使用Git自带的Git Bash命令行工具。<br>（2）系统自带CMD：使用Windows系统的命令行工具。<br>（3）二者都有：上面二者同时配置，但是注意，这样会将windows中的find.exe 和 sort.exe工具覆盖，如果不懂这些尽量不要选择。<br>6.选择之后，继续点击“Next”，显示如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图9.png" alt="这里写图片描述"></p>
  <center>图9</center>

<p> 7.选择之后，点击“Next”，显示截图如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图10.png" alt="这里写图片描述"></p>
<center>图10</center>

<p>8.选择之后，点击“Next”，显示截图如下：</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图11.png" alt="这里写图片描述"></p>
  <center>图11</center>

<p>选择提交的时候换行格式<br>（1）检查出windows格式转换为unix格式：将windows格式的换行转为unix格式的换行再进行提交。<br>（2）检查出原来格式转为unix格式：不管什么格式的，一律转为unix格式的换行再进行提交。<br>（3）不进行格式转换 : 不进行转换，检查出什么，就提交什么。<br>9.选择之后，点击“Next”，显示截图如下：</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图12.png" alt="这里写图片描述"></p>
  <center>图12</center>

<p>10.选择之后，点击“Install”，开始安装，截图显示如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图13.png" alt="这里写图片描述"></p>
  <center>图13</center>

<p>11.安装完成之后，显示截图如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图14.png" alt="这里写图片描述"></p>
  <center>图14</center>

<p>这样，我们的Git客户端就下载并安装完成了。<br>Git英文手册在安装目录下：C:\Program Files\Git<br>【注】具体英文手册的路径根据安装路径决定，请读者根据自己的实际安装路径查找手册。</p>
<h2 id="1-3-Git-Bash配置"><a href="#1-3-Git-Bash配置" class="headerlink" title="1.3 Git Bash配置"></a>1.3 Git Bash配置</h2><p>1.从开始菜单中找到Git Bash，点击打开之后，显示如下：</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图15.png" alt="这里写图片描述"></p>
  <center>图15</center>

<p>2.点击左上角的图标，在下拉菜单中选择“Options…”，点击之后会弹出Git Bash的配置界面，可以根据自己的需要进行配置，操作过程截图如下：</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC1%E7%AB%A0%20Git%E5%85%A5%E9%97%A8/图16.png" alt="这里写图片描述"></p>
  <center>图16</center>

]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>自序</title>
    <url>/2020/04/18/Article/%E8%87%AA%E5%BA%8F/</url>
    <content><![CDATA[<font face="楷体" size="5">

我不是写手,便不是作家,只感人生无常,遂记下万一以表怀念.

人生在世,亦不过是短短数十载,匆匆而过,我们赤条条来到这个世界,怎能亦赤条条回去罢?我想,既然已经来到这个世界,总得留下点什么吧,才不枉走一遭啊!

我是农家的孩子,亦没见过什么大事面,所遇之事也是平常琐事。不觉已经走过二十载，心智渐开，人生百态，变化无常，只是想记录下记忆深处的残言断语。本册有对我有养育之恩的父母的感恩，有对我疼爱有加的长辈的怀念，亦有对我谆谆教诲的老师的感谢，有可亲可爱同学的追忆，也有对人生无常的无限感慨……

前不久，看到著名作家龙应台如是说“在一个文化厚实的社会里，人懂得自己—他不苟且，因为不苟且，所以有品位；人懂得尊重他人—他不霸道，因为不霸道，所以有道德；人懂得尊重自然—他不掠夺，因为不掠夺，所以有永续的生命……”是啊，作为一个人，就应学会尊重并能付诸行动，我们尊重历史，尊重过往，勇敢地面对一切，因为一切都会过去；尊重过来，才能更好地把握未来，方能成大事，行大道，因为一切都不会过去。


</font>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title>欧姓历史</title>
    <url>/2020/04/18/Culture/%E6%AC%A7%E5%A7%93/</url>
    <content><![CDATA[<h2 id="一-姓氏源流"><a href="#一-姓氏源流" class="headerlink" title="一 姓氏源流"></a>一 姓氏源流</h2><p>欧姓的起源有四：<br>1 出自欧冶氏，与区同出于一个源流。春秋的时候有匠人叫欧冶子，因为他居住在欧余山，又以冶炼锻造兵器出名，所以以欧冶为姓。欧冶子后来移居到福建的闽侯县冶山，为越王铸造过湛卢、巨阙、胜邪、鱼肠、纯钩等五种利剑。名噪一时。后来又于徒弟为楚王铸造了龙渊、太阿、工布三把利剑。欧冶子的后代以祖先的名字做为姓氏，形成了欧姓。有的去掉欠字为区姓。欧与区音同。<br>2 出自姒姓。与欧阳姓同宗。夏朝帝王少康的儿子无余，被封于会稽，建立了越国，为诸侯国。到春秋的时候被吴国给灭掉了。十九年后，钩践又复国。到钩践六世孙无疆为越王的时候。被楚国所灭，无疆的次子蹄被封于乌程欧余山的南部，以山南为阳，所以称为欧阳亭侯，无疆的支庶子孙，于是以封地山名和封爵名为姓氏，形成了欧、欧阳、欧侯三个姓氏。后来虽然也有欧阳、欧侯省姓为欧，但是起源仍为这一支。<br>3 出自独孤氏。由于逃亡、迁徙、避难以及其它原因，同一个祖宗的后人分别拥有不同的姓氏，再三国时期独孤氏一部分人改成了欧氏。<br>4 孔氏。汉朝时孔氏的一些人为了避嫌改姓了欧氏。</p>
<h2 id="二-迁徙分布"><a href="#二-迁徙分布" class="headerlink" title="二 迁徙分布"></a>二 迁徙分布</h2><p>欧姓望族居住在平阳（今天的临汾西南）。</p>
<h2 id="三-郡望堂号"><a href="#三-郡望堂号" class="headerlink" title="三 郡望堂号"></a>三 郡望堂号</h2><p>【郡望】： 平阳郡：据《郡望百家姓》的记载，欧氏望出平阳郡。三国的时候魏国所置。在今天的山西临汾一带。<br>【堂号】： 八剑堂：春秋的时候有欧冶子善于铸造剑，越王请他铸了五把剑（湛卢、巨阙、胜邪、鱼肠、纯钩），后来，干将又为赵王铸造了三把剑（龙渊、太阿、工布），这八把剑都是历史上有名的剑。</p>
<h2 id="四-历史名人"><a href="#四-历史名人" class="headerlink" title="四 历史名人"></a>四 历史名人</h2><p>1 欧道江：长乐人，明代学者，博学多才，四方师事，从游者数千人。<br>2 欧冶子：春秋的时候匠人，因为他居住在欧余山，又以冶炼锻造兵器出名，所以以欧冶为姓。欧冶子后来移居到福建的闽侯县冶山，为越王铸造过湛卢、巨阙、胜邪、鱼肠、纯钩等五种利剑。名噪一时。后来又于徒弟为楚王铸造了龙渊、太阿、工布三把利剑。<br>3 欧普祥：元代起义军将领。<br>4 欧大任：明代南京工部郎中，广东顺德人，嘉靖时期国子博士。学者王士贞称其为“广东五才子”之一。<br>5 欧宝：东汉时期著名的孝子。平都人，而且性格开朗,为人豪爽.<br>6 欧信：(公元？～1478年待考)，著名明朝将领。<br>7 欧磐：(公元？～1483年待考)，滁州人(今安徽滁县)。著名明朝将领。袭世职指挥使。明成化中期，历任广西右参将、都指挥同知。屡剿蛮寇有功。分守柳州、庆远。随同平定黄公平、胡公明等乱。弘治中，历任都督佥事、湖广镇守。破府江、永安诸僮乱，击败思恩土官岑濬，铲除其所筑丹良庄石城。为将廉明，能得将士心。明成化十八年(公元1481年)告老归。又二年死。<br>8 欧震：(1899～1969)，字雨辰；广东曲江人。中国国民革命军陆军上将。粤军讲武堂毕业。<br>9 欧伯达：(1925～)，号铁樵；湖南衡阳人。著名当代书法家。<br>10 欧冠：(生卒年待考)，号天爵、天觉；宁远梅岗人。中国国民革命军陆军上将。</p>
<h2 id="五-欧、欧阳、区的关系"><a href="#五-欧、欧阳、区的关系" class="headerlink" title="五 欧、欧阳、区的关系"></a>五 欧、欧阳、区的关系</h2><p>在华族的千千万万个姓氏当中，不少姓氏是源自同一个祖宗，在漫长的历史长河里，由于逃亡、迁徙、避难以及其它原因，同一个祖宗的后人分别拥有不同的姓氏。如区、欧、欧阳都是春秋时代那位“卧薪尝胆”的越王勾践的后人。</p>
<p>在区、欧、欧阳三姓当中，欧氏和欧阳氏是老大，很早就出现这两个姓氏，区氏是在汉朝才出现的，因此，区氏族人谦称是小区，称“欧”氏为大欧。 根据《姓氏考略》记载：“越王无疆之次子封于乌程欧余山之阳，后有欧氏、欧阳氏、欧侯氏，望出平阳。” 由此可见欧氏和欧阳氏都是越王无疆的第二房子孙，而越王无疆则是2400多年前越王勾践的七世孙。如果追溯上去，欧氏和欧阳氏的历史不只2400多年，还可以追溯到夏朝。</p>
<p>越王勾践的祖先出自姬姓，公元前（距今4072年）即位的夏少康的庶子封于会稽，到了越王无疆，被楚所灭，封于乌程欧余山之阳，为欧阳亭侯，他的子孙因而姓“欧”或“欧阳”。 至于“区”姓始于何时，源自哪一位祖先？根据广东新会《区渭泉祖家谱》记载，夏少康封少子无余于会稽，伺奉大禹的宗祠，因为夏禹埋葬在这里，食粟于欧山，因而以“欧”为姓。 到了汉朝，欧氏族人欧安是一位富商，他乐善好施，深得人们尊敬，汉景帝很赏识他的为人。有一天，汉景帝对他说：“卿才德兼备，何欠之有，应去欠为区。” 在封建时代，皇帝赐姓给臣民或叫臣民改姓，是一种荣誉，表示皇帝关心他的臣民，只有乖乖接受。这一来，欧安便改姓为“区”，成为区安。从此，他的子孙便成为“区”氏族人了。</p>
<p>《区渭泉祖家谱》提到区、欧、欧阳同一衍派，一概不通婚。 《区渭泉祖家谱》又说，他们的始祖竹溪公于宋度宗咸淳年间（公元1265—1274年）从粤北南雄珠矶巷迁徙到广东新会来。在这之前他们的祖先居住在福建莆田。其实，不论是区氏、欧氏或欧阳氏，他们的祖先都是从中原，经过莆田，南下福建、广东各地。</p>
]]></content>
      <categories>
        <category>文化</category>
      </categories>
      <tags>
        <tag>文化</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第3章 Git相关配置</title>
    <url>/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图1.png" alt="这里写图片描述"></p>
<center>图1工作区、版本库、暂存区的关系图</center>

<p><font size="4" color="#DD0000" face="黑体">    查看文件记录</font><br>命令：git log – pretty=raw<br>进入Ouxiaolong的Git Bash：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图2.png" alt="这里写图片描述"></p>
<center>图2</center>

<p><font size="4" color="#DD0000" face="黑体">    查看对象</font><br>命令：git cat-file -t 哈希值（一般写前6位即可）</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图3.png" alt="这里写图片描述"></p>
<center>图3</center>

<p><font size="4" color="#DD0000" face="黑体">    查看对象的内容</font><br>命令：git cat-file -p 哈希值（一般写前6位即可）</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图4.png" alt="这里写图片描述"></p>
<center>图4</center>

<p>一级一级追溯，最终追溯到文件的内容。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图5.png" alt="这里写图片描述"></p>
<center>图5</center>

<p>进入用户Bruceou的Git Bash：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图6.png" alt="这里写图片描述"></p>
<center>图6</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC3%E7%AB%A0%20Git%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/图7.png" alt="这里写图片描述"></p>
<center>图7</center>

<p><font size="4" color="#DD0000" face="黑体">    比较不同</font><br>命令：git diff<br>git diff –staged //比较workspace VS staged<br>git diff –cached //staged VS local repo</p>
<p><font size="4" color="#DD0000" face="黑体">    查看分支及创建分支</font><br>命令：git branch<br>命令：git branch 分支名 //创建分支<br>命令：git checkout 分支名 //切换分支命令</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第2章 Git命令的基本操作</title>
    <url>/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><font face="黑体" size="4" color="#DD0000">第一步：仓库初始化</font><br>在Repository/Git目录下点击右键-&gt;Git Bash Here</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图1.png" alt="这里写图片描述"></p>
<center>图1</center>

<p>进入Git Bash<br>命令：git init —bare shared.git</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图2.png" alt="这里写图片描述"></p>
  <center>图2</center>

<p>如图表明初始化成功。</p>
<p>===================================开发人员1操作================================</p>
<p><font face="黑体" size="4" color="#DD0000">第二步：复制仓库到本地</font><br>命令：git clone /D/Git/Git/Repository/Git/shared.git . (注意有个点，表明当前目录)</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图3.png" alt="这里写图片描述"></p>
  <center>图3</center>

<p><font face="黑体" size="4" color="#DD0000">第三步：设置个人信息</font><br>git config：<br>    —system：操作/etc/gitconfig文件：包含了适用于系统所有用户和所有库的值。<br>    —global：操作~/.git config文件：具体到你的用户<br>    缺省：操作仓库.git/config文件<br>命令：<br>git config user.name “user1”//用户名<br>git config user.email user1@163.com//用户邮箱</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图4.png" alt="这里写图片描述"></p>
  <center>图4</center>

<p>用ls –al命令可以看到隐藏文件。如下图所示。</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图5.png" alt="这里写图片描述"></p>
  <center>图5</center>

<p>进入.git文件夹，查看配置文件。<br>命令：cat congfig</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图6.png" alt="这里写图片描述"></p>
  <center>图6</center>

<p><font face="黑体" size="4" color="#DD0000">第四步：忽略无需版本控制的文档</font><br>命令：echo “*.txt” &gt; .gitignore</p>
<p><font face="黑体" size="4" color="#DD0000">第五步：新建一个文件</font><br>命令：echo “User1 add content” &gt; index.txt</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图7.png" alt="这里写图片描述"></p>
  <center>图7</center>

<p>查看是否添加成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图8.png" alt="这里写图片描述"></p>
  <center>图8</center>

<p><font face="黑体" size="4" color="#DD0000">第六步：提交文件</font><br>命令：<br>git add index.txt</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图9.png" alt="这里写图片描述"></p>
  <center>图9</center>

<p>命令：git commit </p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图10.png" alt="这里写图片描述"></p>
  <center>图10</center>

<p>命令：首行添加：Bruceou add the file<br>保存退出，如下图表示成功。</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图11.png" alt="这里写图片描述"></p>
<center>图11</center>

<p><font face="黑体" size="4" color="#DD0000">第七步：把自己的仓库提交到公共服务器</font><br>命令：git push origin master</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图12.png" alt="这里写图片描述"></p>
<center>图12</center>

<p>=================================开发人员2操作==================================</p>
<p><font face="黑体" size="4" color="#DD0000">第八步：复制仓库到本地</font><br>命令：git clone /D/Git/Git/Repository/Git/shared.git .//本地克隆<br>命令：git clone git@github.com:Ouxiaolong/Smart_Home.git  //远程克隆</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图13.png" alt="这里写图片描述"></p>
<center>图13</center>

<p><font face="黑体" size="4" color="#DD0000">第九步：设置个人信息</font><br>命令：<br>git config user.name “user2”<br>git config user.email user2@163.com</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图14.png" alt="这里写图片描述"></p>
<center>图14</center>

<p><font face="黑体" size="4" color="#DD0000">第十步：忽略无需版本控制的文档</font><br>命令：echo “*.txt” &gt; .gitignore</p>
<p><font face="黑体" size="4" color="#DD0000">第十一步：新建一个文件</font><br>命令：echo “User2 add content” &gt;&gt; index.txt</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图15.png" alt="这里写图片描述"></p>
<center>图15</center>

<p><font face="黑体" size="4" color="#DD0000">第十二步：提交文件</font><br>命令：git add index.txt</p>
<p>  <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图16.png" alt="这里写图片描述"></p>
<center>图16</center>

<p>命令：git commit -m “Ouxiaolong add the file!”</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图17.png" alt="这里写图片描述"></p>
<center>图17</center>

<p><font face="黑体" size="4" color="#DD0000">第十三步：把自己的仓库提交到公共服务器</font><br>命令：git push origin master</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC2%E7%AB%A0%20Git%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/图18.png" alt="这里写图片描述"></p>
<center>图18</center>

<p>查看状态：<br>命令：git status</p>
<p>=================================开发人员1操作==================================</p>
<p><font face="黑体" size="4" color="#DD0000">第十四步：下载服务器最新数据</font><br>git pull</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第4章 Tortoise Git</title>
    <url>/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/</url>
    <content><![CDATA[<h2 id="4-1-Tortoise-Git的安装及汉化"><a href="#4-1-Tortoise-Git的安装及汉化" class="headerlink" title="4.1 Tortoise Git的安装及汉化"></a>4.1 Tortoise Git的安装及汉化</h2><p>TortoiseGit的安装很简单，笔者就不在一步一步讲解了。<br>汉化就是安装了个汉化包。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图1.png" alt="这里写图片描述"></p>
<center>图1</center>

<p>【注意】汉化包的位数必须和TortoiseGit相一致。<br>下载地址：<a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">https://tortoisegit.org/download/</a><br>在空白处单击右键有如下图显示表示安装成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图2.png" alt="这里写图片描述"></p>
 <center>图2 </center>

<p>接下来就对其进行设置成中文，在空白处单击鼠标右键-&gt;TortoiseGit-&gt;Setting。<br><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图3.png" alt="这里写图片描述"><br> <center>图3 </center></p>
<p>按照下图中步骤即可。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图4.png" alt="这里写图片描述"> </p>
 <center>图4 </center>

<h2 id="4-2-TortoiseGit的使用"><a href="#4-2-TortoiseGit的使用" class="headerlink" title="4.2 TortoiseGit的使用"></a>4.2 TortoiseGit的使用</h2><p><font face="黑体" size="4" color="#DD0000">    创建仓库</font><br>在下新建shared.git文件夹，然后在新建的库文件D:\Git\Git\Repository\Git\shared.git目录下单击右键-&gt;Git在这里创建版本库(Y)…</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图5.png" alt="这里写图片描述"></p>
 <center>图5</center>

<p>提示如下图。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图6.png" alt="这里写图片描述"> </p>
 <center>图6</center>
<font face="黑体" size="4" color="#DD0000">    克隆文件并提交</font>
再在工作目录D:\Git\work下新建两个文件夹。

![这里写图片描述](第4章 Tortoise Git/图7.png)

 <center>图7</center>

<p>进入Bruceou目录下，鼠标右击-&gt;Git克隆…</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图8.png" alt="这里写图片描述"></p>
 <center>图8</center>

<p>克隆库文件。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图9.png" alt="这里写图片描述"></p>
 <center>图9</center>


<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图10.png" alt="这里写图片描述"> </p>
 <center>图10</center>

<p>在在工作目录D:\Git\work\Bruceou文件目录下新建index.txt，并输入Bruceou add the file.</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图11.png" alt="这里写图片描述"> </p>
 <center>图11</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图12.png" alt="这里写图片描述"></p>
 <center>图12</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图13.png" alt="这里写图片描述"></p>
 <center>图13</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图14.png" alt="这里写图片描述"> </p>
 <center>图14</center>

<p>如下显示表提交成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图15.png" alt="这里写图片描述"> </p>
 <center>图15</center>

<p>然后再同步到库。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图16.png" alt="这里写图片描述"> </p>
 <center>图16</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图17.png" alt="这里写图片描述"></p>
 <center>图17</center>

<p><font face="黑体" size="4" color="#DD0000">    克隆库文件及同步</font><br>在另一个用户目录下克隆文件看库。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图18.png" alt="这里写图片描述"> </p>
 <center>图18</center>

<p> <img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图19.png" alt="这里写图片描述"></p>
 <center>图19克隆库文件</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC4%E7%AB%A0%20Tortoise%20Git/图20.png" alt="这里写图片描述"></p>
 <center>图20</center>
拉取后在此工作目录也能看到index.txt。

![这里写图片描述](第4章 Tortoise Git/图21.png)

 <center>图21</center>




]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第6章 copssh</title>
    <url>/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/</url>
    <content><![CDATA[<h2 id="6-1-Copssh的安装"><a href="#6-1-Copssh的安装" class="headerlink" title="6.1 Copssh的安装"></a>6.1 Copssh的安装</h2><p>下载地址：<a href="https://www.itefix.net/copssh" target="_blank" rel="noopener">https://www.itefix.net/copssh</a></p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图1.png" alt="这里写图片描述"></p>
 <center>图1</center>

<p>点击next。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图2.png" alt="这里写图片描述"></p>
 <center>图2</center>

<p>点击I Agree。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图3.png" alt="这里写图片描述"></p>
 <center>图3</center>

<p>其中：安装目录根据实际自己选择，避免路径中有空格，造成不必要的麻。再点击next。<br>设置SSH的帐号密码，再单击Install。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图4.png" alt="这里写图片描述"></p>
 <center>图4</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图5.png" alt="这里写图片描述"></p>
 <center>图5</center>

<p>表示安装成功。</p>
<h2 id="6-2-Copssh的配置"><a href="#6-2-Copssh的配置" class="headerlink" title="6.2 Copssh的配置"></a>6.2 Copssh的配置</h2><p>选择COPSSH Control Panel-&gt;Users-&gt;Add</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图6.png" alt="这里写图片描述"></p>
 <center>图6</center>

<p>点击Forward继续。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图7.png" alt="这里写图片描述"></p>
 <center>图7</center>

<p>选择用户，点击Forward继续。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图8.png" alt="这里写图片描述"></p>
 <center>图8</center>

<p>默认选择，点击Forward继续。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图9.png" alt="这里写图片描述"></p>
 <center>图9</center>

<p>点击Apply继续。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图10.png" alt="这里写图片描述"></p>
 <center>图10</center>

<p>再回到COPSSH Control Panel-&gt;Users，选择用户并应用此用户。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图11.png" alt="这里写图片描述"></p>
 <center>图11</center>

<p>表示用户添加成功。<br>再COPSSH Control Panel-&gt;Stauts下开启服务。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图12.png" alt="这里写图片描述"></p>
 <center>图12</center>

<p>如上图启动应用。<br>在启动应用的情况下，打开cmd，登陆ssh。（登陆方法很多）</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图13.png" alt="这里写图片描述"></p>
 <center>图13</center>

<p>【注意】命令行是Windows自带的命令行，另外环境变量应根据实际情况设置。<br>要让COPSSH支持git命令，应在D:\Git\Git\mingw64\libexec\git-core目录下，找到以下文件。复制到D:\Git\Copssh\ICW\bin目录下。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图14.png" alt="这里写图片描述"></p>
 <center>图14</center>

<p>将D:\Git\Git\mingw64\bin目录下的libiconv-2.dll复制到D:\Git\Copssh\ICW\bin目录下。</p>
<h2 id="6-3建库操作"><a href="#6-3建库操作" class="headerlink" title="6.3建库操作"></a>6.3建库操作</h2><p><font face="黑体" size="4" color="#DD0000">    链接Git版本库</font><br>登录完成后，此时的实际路径是在D:\Git\Copssh\ICW\Repository建库。打开Bash，输入代码：<br>命令：ssh-keygen –t rsa –C “you@example.com” //输入邮箱<br>生成公钥，默认名称为id_rsa（如果我们没有生成key的话，直接用电脑命令行可能连接不成功。如果用命令行可以连接的话，同样可以用命令行来生成。）<br>然后一直回车，如图显示便设置成功（如果该路径已经有了该文件，会提醒你是否覆盖，输入y确认就行）。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图15.png" alt="这里写图片描述"></p>
 <center>图15</center>

<p>根据文件路径找到id_rsa.pub和id_rsa文件，笔者的在D:\Git\Copssh\ICW\home\ouxiaolong.ssh目录下。在当前文件夹中，新建文件authorized_keys（无后缀），用记事本打开，把id_rsa.pub内容复制进去保存。打开COPSSH选定用户，点击“keys•••”</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图16.png" alt="这里写图片描述"></p>
 <center>图16</center>

<p>如果public key中有内容说明key添加成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图17.png" alt="这里写图片描述"></p>
 <center>图17</center>

<p>打开电脑命令行，进入SSH安装目录下的bin文件夹，调用ssh.exe文件，输入以下代码：<br>“ssh 用户名@你的服务器名称或者IP地址”，我这里输入的是IP地址。回车 ，输入yes。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图18.png" alt="这里写图片描述"></p>
 <center>图18</center>

<p>出现上图所示表示链接成功。<br>登录完成后，此时的实际路径是在D:\Git\Copssh\ICW</p>
<p><font face="黑体" size="4" color="#DD0000">    建库操作</font><br>建库操作步骤如下：<br>mkdir git//创建git文件夹<br>cd git//进入git文件夹<br>git init //版本库初始化，会以git为库名建立一个新库<br>建好仓库后打开git进入隐藏文件夹.git，用记事本打开config文件加入<br>[receive]<br>denyCurrentBranch = ignore<br>服务端所有工作完成！</p>
<p>【小贴士】<br>建库时错误处理：<br>在建库时输入git init后出现下图情况：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC6%E7%AB%A0%20copssh/图19.png" alt="这里写图片描述"></p>
 <center>图19</center>

<p>为了解决方法， 找到<br>D:\Git\Copssh\ICW\home\ouxiaolong.bashrc和D:\Git\Copssh\ICW\etc\profile<br>打开这两个文件。在最后加上这段：<br>itpath=’cygdrive/D/Git/Git/mingw64/bin’<br>gitcorepath=’cygdrive/D/Git/Git/mingw64/libexec/git-core’<br>PATH=${gitpath}:${gitcorepath}:${PATH}<br>修改好后，Dos（cmd命令符窗口）需要重新开启。重新写git init，git clone；都不会出错了。</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第5章 安装eclipse的插件EGit以及使用</title>
    <url>/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="5-1-安装eclipse的EGit的插件"><a href="#5-1-安装eclipse的EGit的插件" class="headerlink" title="5.1 安装eclipse的EGit的插件"></a>5.1 安装eclipse的EGit的插件</h2><p>下载地址：<a href="http://www.eclipse.org/egit/download/" target="_blank" rel="noopener">http://www.eclipse.org/egit/download/</a></p>
<font size="4" color="#DD0000" face="黑体">第一步：打开eclipse- >help-.Install New Software</font>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图1.png" alt="这里写图片描述"><br> <center>图 1</center><br><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图2.png" alt="这里写图片描述"></p>
 <center>图2</center>

<font size="4" color="#DD0000" face="黑体">第二步：点击Add，找到安装包的位置。</font>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图3.png" alt="这里写图片描述"></p>
 <center>图3</center>

<font size="4" color="#DD0000" face="黑体">第三步：按下图所示勾选。</font>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图4.png" alt="这里写图片描述"></p>
 <center>图4</center>

<font size="4" color="#DD0000" face="黑体">第四步：再单击Next，进入下一步，同意声明后，点击Finish即可。</font>

<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图5.png" alt="这里写图片描述"></p>
 <center>图5</center>

<font size="4" color="#DD0000" face="黑体">第五步：重启eclipse后。查看是否安装成功。在eclipse->Window->Preferences，显示有Git表示安装成功。</font>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图6.png" alt="这里写图片描述"></p>
 <center>图6</center>

<h2 id="5-2-eclipse中Git的使用"><a href="#5-2-eclipse中Git的使用" class="headerlink" title="5.2 eclipse中Git的使用"></a>5.2 eclipse中Git的使用</h2><font size="4" color="#DD0000" face="黑体">第一步：单击eclipse- >Open Perspespective，选择Git，单击OK即可。</font>

<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图7.png" alt="这里写图片描述"></p>
<center>图7</center>

<font size="4" color="#DD0000" face="黑体">第二步：克隆文件</font>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图8.png" alt="这里写图片描述"></p>
 <center>图8</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图9.png" alt="这里写图片描述"></p>
 <center>图9</center>

<p>点击next，直到出现下图所示，按一下操作。</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图10.png" alt="这里写图片描述"></p>
 <center>图10</center>

<p>这样就克隆了文件。</p>
<p><font size="4" color="#DD0000" face="黑体">第三步：导入项目</font><br>单击鼠标右键-&gt;Import projects</p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图11.png" alt="这里写图片描述"><br> <center>图11</center></p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图12.png" alt="这里写图片描述"><br> <center>图12</center></p>
<p> <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图13.png" alt="这里写图片描述"></p>
 <center>图13</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图14.png" alt="这里写图片描述"></p>
 <center>图14</center>

<p>现在就开始编码了。</p>
<p><font size="4" color="#DD0000" face="黑体">第四步：建立用户信息、</font><br>在正式编码之前，应该建立用户信息。在eclipse-&gt;Window-&gt;Preferences-&gt;Add Entry…</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图15.png" alt="这里写图片描述"></p>
 <center>图15</center>

<p>填写用户名了邮箱。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图16.png" alt="这里写图片描述"></p>
 <center>图16</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图17.png" alt="这里写图片描述"></p>
 <center>图17</center>

<p>填写完后如下所示表成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图18.png" alt="这里写图片描述"><br> <center>图18</center></p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图19.png" alt="这里写图片描述"></p>
 <center>图19</center>

<p><font size="4" color="#DD0000" face="黑体">第五步：修改并同步文件</font><br>修改后文件后，选择文件右击-&gt;Add to Index</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图20.png" alt="这里写图片描述"></p>
 <center>图20</center>

<p>选择整个工程的文件右击-&gt;选择commit…</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图21.png" alt="这里写图片描述"><br> <center>图21</center><br><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图22.png" alt="这里写图片描述"><br> <center>图22</center><br>  <img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图23.png" alt="这里写图片描述"></p>
 <center>图23</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图24.png" alt="这里写图片描述"><br> <center>图24</center><br><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图25.png" alt="这里写图片描述"></p>
 <center>图25</center>

<p>同样在另一个工程文件夹下拉取后能看到克隆的文件。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC5%E7%AB%A0%20%E5%AE%89%E8%A3%85eclipse%E7%9A%84%E6%8F%92%E4%BB%B6EGit%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/图26.png" alt="这里写图片描述"></p>
 <center>图26</center>

<p>里面的内容也同步更新了。</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第7章 Git和Github的使用</title>
    <url>/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="7-1Github库的创建"><a href="#7-1Github库的创建" class="headerlink" title="7.1Github库的创建"></a>7.1Github库的创建</h2><p>登录成功后界面，没有账户的先注册一个账户。首先要创建仓库，要想使用github来托管自己的项目代码，因此先要创建一个仓库，仓库分公开的和私有的，公开的是免费的，私有的是收费的，我使用的是公开的仓库，如下创建方式</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图1.png" alt="这里写图片描述"></p>
 <center>图1</center>

<p>点击New repository按钮，如果是首次使用会要求确认邮箱，确认后。弹出如下界面，第一行填仓库名，这里就随便叫Test了，第二行是对这个仓库的描述，之后那个Public就是公共仓库的意思，接下来的README就是在仓库里创建一个README文件，可以往里写一些介绍你这个项目的功能之类的东西，再下面那个Add gitignore按钮，可以选择你这个项目是用什么语言之类的,我这里选择了，后面那个License我没有选，点击”Create repository”。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图2.png" alt="这里写图片描述"></p>
 <center>图2创建库</center>

<p>创建仓库成功后,界面如下显示,可以点击README.md来编译这个文件。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图3.png" alt="这里写图片描述"></p>
 <center>图3</center>

<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图4.png" alt="这里写图片描述"></p>
 <center>图4</center>

<h2 id="7-2配置"><a href="#7-2配置" class="headerlink" title="7.2配置"></a>7.2配置</h2><h3 id="7-2-1-Git配置"><a href="#7-2-1-Git配置" class="headerlink" title="7.2.1 Git配置"></a>7.2.1 Git配置</h3><p>1.Git bash打开之后输入命令如下：<br>ssh-keygen -t rsa -C “邮箱地址”<br>【注意】ssh-keygen之间是没有空格的,其他的之间是有空格的。<br>GitHub邮箱：该命令后面的邮箱就是你的注册邮箱。<br>路径选择：使用该命令之后, 会出现提示选择ssh-key生成路径, 这里直接点回车默认即可, 生成的ssh-key在默认路径中。<br>密码确认：这里我们不使用密码进行登录, 用密码太麻烦，直接回车。当然，如果你想使用密码登录，那就输入密码（密码他不能太短）之后回车。<br>操作显示截图如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图5.png" alt="这里写图片描述"></p>
 <center>图5</center>

<p>2.在上面显示的默认路径下找到生成的Key，我的默认路径是“C:\Users\ouxiaolong.ssh”，如果不知道自己的默认路径，可以输入“pwd”命令查看。<br>3.使用记事本或者UE工具打开“id_rsa.pub”文件, 将该文件中的内容复制到GIT服务器上。进入GitHub网站：登录GitHub, 选择“Settings”，操作截图显示如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图6.png" alt="这里写图片描述"></p>
 <center>图6</center>

<p>左侧选择“SSH and GPG keys”，操作截图显示如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图7.png" alt="这里写图片描述"></p>
 <center>图7</center>

<p>4.点击右侧的“New SSH key”，在显示的输入框中将前面生成的key输入进去，操作截图如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图8.png" alt="这里写图片描述"></p>
 <center>图8</center>

<p>输入之后点击“Add SSH key”<br>5.点击添加之后，显示截图如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图9.png" alt="这里写图片描述"></p>
 <center>图9</center>

<p>同时，我们配置的邮箱也会收到相应的邮件，截图如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图10.png" alt="这里写图片描述"></p>
 <center>图10</center>

<p>这样，我们本地的key就添加到GitHub上了。当然，如果你对应的Git服务器是你们公司或者你自己搭建的，那只需要登录相应的Git服务器，然后将你本地生成的key添加上去即可。<br>6.验证是否配置成功<br>输入命令：<br>ssh -T git@github.com<br>验证时可能让你输入YES。<br>成功提示 : 如果出现“Hi ouxiaolong! You’ve successfully authenticated, but GitHub does not provide shell access.”就说明配置成功，可以连接上GitHub，操作截图显示如下：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图11.png" alt="这里写图片描述"></p>
 <center>图11</center>

<p>7.配置本地用户和邮箱<br>我们需要设置一个用户名和邮箱，这是用来上传本地仓库到GitHub时，在GitHub中显示代码上传者的。<br>配置命令如下：<br>git config —global user.name “xxx” //设置用户名<br>git config —global user.email “邮箱” //设置邮箱<br>操作截图显示如下：<br>到这里，我们的Git客户端就配置完成了，并且我们本地的key也成功上传到Git服务端了。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图12.png" alt="这里写图片描述"></p>
 <center>图12</center>

<h3 id="7-2-2使用Git-Github"><a href="#7-2-2使用Git-Github" class="headerlink" title="7.2.2使用Git + Github"></a>7.2.2使用Git + Github</h3><p>到现在为止，我们就算把Github配置完了，Git的相关操作不懂参看前几章，这里就不在赘述了。现在就来托管我们的项目吧，刚才我们已经在github上面创建了一个叫Smart_Home的仓库，那么我们现在就在本地创建一个目录，来管理这个仓库。</p>
<font size="4" color="#DD0000">    随意创建了一个目录叫Git</font>


<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图13.png" alt="这里写图片描述"></p>
 <center>图13</center>

<font size="4" color="#DD0000">    右击目录，出现的菜单中有Git Bash Here，点击它。</font>


<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图14.png" alt="这里写图片描述"></p>
 <center>图14</center>

<font size="4" color="#DD0000">    这时候就在这个目录上打开了我们的终端。</font>


<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图15.png" alt="这里写图片描述"></p>
 <center>图15</center>

<p><font size="4" color="#DD0000">    这时候输入 git init，来完成初始化工作。</font><br>命令：git init//初始化</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图16.png" alt="这里写图片描述"></p>
 <center>图16</center>

<p>命令：git remote add origin git@github.com:Ouxiaolong/Smart_Home.git</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图17.png" alt="这里写图片描述"></p>
 <center>图17</center>

<p>命令：git pull git@github.com: Ouxiaolong/Smart_Home.git</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图18.png" alt="这里写图片描述"></p>
 <center>图18</center>

<p><font size="4" color="#DD0000">    上传本地文件到仓库</font><br>首先执行增加命令，如下：<br>命令：git add .</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图19.png" alt="这里写图片描述"></p>
<center>图19</center>

<p>add后面加了一个点，是想要提交所有文件，如果想提交指定的文件，可以写文件名，执行完增加命令后，要执行提交命令，如下：<br>命令：git commit –m “版本号（自定义）”</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图20.png" alt="这里写图片描述"></p>
 <center>图20</center>

<p>-m后面跟提示信息，这个提示信息是一定要写的，不仅是规则，同时也方便我们记录我们提交的过程，写清晰为什么提交或修改了什么是非常有用的，提交完成后，我们就要把它推送到远程仓库上去了，命令如下：<br>命令：git push git@github.com: Ouxiaolong/Smart_Home.git</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图21.png" alt="这里写图片描述"></p>
 <center>图21</center>

<p>再到github上看到如下显示表示添加成功。</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC7%E7%AB%A0%20Git%E5%92%8CGithub%E7%9A%84%E4%BD%BF%E7%94%A8/图22.png" alt="这里写图片描述"></p>
 <center>图22</center>

<p>这样就完成了我们要做的所有任务。</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第8章 github常见操作和常见错误</title>
    <url>/2020/04/18/Git/%E7%AC%AC8%E7%AB%A0%20github%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E5%92%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p><font face="黑体" color="#DD0000" size="4">1.如果输入$ ssh -T git@github.com</font><br>出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。</p>
<p><font face="黑体" color="#00DD00" size="4">解决办法如下：</font><br>    先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。<br>    如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。<br>    最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</p>
<p><font face="黑体" color="#DD0000" size="4">2.如果输入$ git push origin master</font><br>提示出错信息：error:failed to push som refs to …….</p>
<p><font face="黑体" color="#00DD00" size="4">解决办法如下：</font><br>    先输入$ git pull origin master //先把远程服务器github上面的文件拉下来<br>    再输入$ git push origin master<br>    如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.<br>    则需要重新输入$ git remote add origingit@github.com:djqiang/gitdemo.git</p>
<p><font face="黑体" color="#DD0000" size="4">3.用git在本地创建一个项目的过程</font><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ makdir ~&#x2F;hello-world    &#x2F;&#x2F;创建一个项目hello-world</span><br><span class="line">$ cd ~&#x2F;hello-world       &#x2F;&#x2F;打开这个项目</span><br><span class="line">$ git init             &#x2F;&#x2F;初始化 </span><br><span class="line">$ touch README</span><br><span class="line">$ git add README        &#x2F;&#x2F;更新README文件</span><br><span class="line">$ git commit -m &#39;first commit&#39;     &#x2F;&#x2F;提交更新，并注释信息“first commit”</span><br><span class="line">$ git remote add origin git@github.com:defnngj&#x2F;hello-world.git     &#x2F;&#x2F;连接远程github项目  </span><br><span class="line">$ git push -u origin master     &#x2F;&#x2F;将本地项目更新到github项目上去</span><br></pre></td></tr></table></figure></p>
<p><font face="黑体" color="#DD0000" size="4">4. gitconfig配置文件</font><br>Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置：<br>    /etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’—system’ 给 git config，它将明确的读和写这个文件。 </p>
<p>    ~/.gitconfig 文件 ：具体到你的用户。你可以通过传递—global 选项使Git 读或写这个特定的文件。<br>    位于git目录的config文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。</p>
<p>在Windows系统中，Git在$HOME目录中查找.gitconfig文件（对大多数人来说，位于C:\Documents and Settings\$USER下）。它也会查找/etc/gitconfig，尽管它是相对于Msys 根目录的。这可能是你在Windows中运行安装程序时决定安装Git的任何地方。</p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《Git与Github使用笔记》第9章 GitHub创建静态页面</title>
    <url>/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>GitHub Pages可以被认为是用户编写的、托管在github上的静态网页。废话就不说了，关于GitHub Pages的相关内容自己上网查看吧， 博主在这里教大家快速搭建个人主页。<br><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages首页</a></p>
<p><font face="黑体" size="4" color="#DD0000">第一步：创建Github库</font><br>参见博主的《Git和GitHub是用笔记》的第7章<a href="http://blog.csdn.net/u013162035/article/details/78476880" target="_blank" rel="noopener">《Git和Github的使用》的第1节</a>，把文件名改为“用户名.github.io”，其他相同。</p>
<p>【注】如过没有配置KEY，就参看博主的《Git和GitHub使用笔记》的第7章<a href="http://blog.csdn.net/u013162035/article/details/78476880" target="_blank" rel="noopener">《Git和Github的使用》</a>的第2节内容。</p>
<p><font face="黑体" size="4" color="#DD0000">第二步：克隆存储库</font><br>转到你想要存储项目的文件夹，本地电脑上（博主使用的Windows系统），并克隆新的存储库:<br><img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图1.png" alt="这里写图片描述"></p>
<p><font face="黑体" size="4" color="#DD0000">第三步：新建网页代码</font><br> 输入项目文件夹并添加索引。html文件:<br> <img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图2.png" alt="这里写图片描述"><br><img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图3.png" alt="这里写图片描述"><br>【注】博主在这里只是告诉大家创建的流程，这里可是将你创建好的整个网站工程放到该目录下，在推送到GitHub就可以了。</p>
<p><font face="黑体" size="4" color="#DD0000">第四步：推送到GitHub</font><br>Add, commit, and push :<br> <img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图4.png" alt="这里写图片描述"><br> <img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图5.png" alt="这里写图片描述"><br><img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图6.png" alt="这里写图片描述"></p>
<p>【注】<br>问题：<br> <img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图7.png" alt="这里写图片描述"><br>解决：</p>
<p><img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图8.png" alt="这里写图片描述"></p>
<p><font face="黑体" size="4" color="#DD0000">第五步：验证网页是否创建成功</font><br><a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a>.<br>【注】username是你创建的用户名，<br>笔者创建成功后，进入的界面如下图所示。<br> <img src="/2020/04/18/Git/%E7%AC%AC9%E7%AB%A0%20GitHub%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/图9.png" alt="这里写图片描述"></p>
<p><strong>附上博主的个人网站</strong></p>
<p><a href="https://ouxiaolong.github.io./" target="_blank" rel="noopener">https://ouxiaolong.github.io./</a></p>
]]></content>
      <categories>
        <category>git&amp;GitHub</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第1章 Hexo博客搭建</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/u013162035/article/details/80718576" target="_blank" rel="noopener">CSDN博客地址</a><br><a href="https://www.bilibili.com/video/av25095534" target="_blank" rel="noopener">B站配套视频</a></p>
<p>Hexo官方：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br>Hexo官方(中文)：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a><br>Node.js官方网站：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>Node.js官方文档：<a href="https://nodejs.org/en/docs/" target="_blank" rel="noopener">https://nodejs.org/en/docs/</a><br>Node.js安装文档：<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">https://nodejs.org/en/download/package-manager/</a></p>
<h2 id="1-1-Hexo简介"><a href="#1-1-Hexo简介" class="headerlink" title="1.1 Hexo简介"></a>1.1 Hexo简介</h2><p>Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。</p>
<h2 id="1-2-node-js安装"><a href="#1-2-node-js安装" class="headerlink" title="1.2 node.js安装"></a>1.2 node.js安装</h2><p>Hexo是基于node.js的，所以我们在安装它之前需要用到npm安装工具，这个工具是 node.js 安装包的工具，所以，我们先要安装 node.js。<br>笔者是用的Windows 64位的，到node.js下载安装包。</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图1.png" alt="这里写图片描述"></p>
<center>图1</center>

<p>下载后直接安装就可以啦，和普通的软件没有什么大的区别，所有笔者就不赘述了。</p>
<h2 id="1-3-GitHub账户创建及客户端安装"><a href="#1-3-GitHub账户创建及客户端安装" class="headerlink" title="1.3 GitHub账户创建及客户端安装"></a>1.3 GitHub账户创建及客户端安装</h2><p>关于git账户创建及客户端下载安装等可参看笔者的博客，笔者在这里就不在赘述了。<br>GitHub官网：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>Git和Github的使用：<a href="https://blog.csdn.net/u013162035/article/details/78476880" target="_blank" rel="noopener">https://blog.csdn.net/u013162035/article/details/78476880</a><br>Git下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>Git安装：<a href="https://blog.csdn.net/u013162035/article/details/78464161" target="_blank" rel="noopener">https://blog.csdn.net/u013162035/article/details/78464161</a></p>
<p>在github网页上创建一个以username.github.io命名的repositories,此时username为自己github的账号名称。</p>
<h2 id="1-4安装hexo"><a href="#1-4安装hexo" class="headerlink" title="1.4安装hexo"></a>1.4安装hexo</h2><p>使用npm安装Hexo，输入以下命令：</p>
<p><pre>$ npm install hexo-cli -g</pre><br><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图2.png" alt="这里写图片描述"></p>
<h2 id="1-5创建Blog"><a href="#1-5创建Blog" class="headerlink" title="1.5创建Blog"></a>1.5创建Blog</h2><p>笔者在D盘下新建一个blog的文件夹，然后进入blog文件夹，单击右键打开git bash。<br><strong>1. 创建一个叫blog网站</strong><br>$ hexo init<br><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图3.png" alt="这里写图片描述"></p>
<p>如果没有进入blog文件夹， 就会在当前目录进行初始化。这是初始化命令就要加blog。<br>$ hexo init blog</p>
<p>如果后面跟了名子就会创建目录并在目录进行初始化操作, 以这个名子为目录名。<br><strong>2. 我们进入创建的blog目录里. 并运行该服务</strong><br>$ npm install</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图4.png" alt="这里写图片描述"></p>
<p>$ hexo server</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图5.png" alt="这里写图片描述"></p>
<p>【注】hexo命令<br>$ hexo install</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图6.png" alt="这里写图片描述"></p>
<p><strong>3. 测试网页</strong><br>打开浏览器, 在地址栏输入<a href="http://localhost:4000/可以看到我们刚刚创建的blog首页" target="_blank" rel="noopener">http://localhost:4000/可以看到我们刚刚创建的blog首页</a></p>
<p><strong>4.修改blog目录下的_config.yml配置文件将网站自部署到Github上</strong><br>$ vim _config.yml 添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git </span><br><span class="line">repo: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图7.png" alt="这里写图片描述"></p>
<p>【注】在type前面需要增加两个空格，在type的冒号后面需要增加一个空格。请保持代码风格一致，否则会出现错误或是不正确的问题。<br><strong>5.安装部署使用到的git插件</strong><br>在这里我们使用的是git源码管理工具，所以，我需要安装git包进行部署，安装这个插件才能使用git进行自动部署。</p>
<p>$ npm install hexo-deployer-git -save</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图8.png" alt="这里写图片描述"></p>
<p>在接下来，我们将要生成网站了，首先清理一下缓存。<br>$hexo clean</p>
<p><strong>6.进行生成网站</strong><br>当我们部署网站前，需要先生成静态网站。它会自动在目录下创建public的目录, 并将新生成的网页存放在这个目录里。</p>
<p>$ hexo g或hexo generate</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图9.png" alt="这里写图片描述"></p>
<p><strong>7.进行自动部署网站</strong><br>注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署，生成网站前第6步。</p>
<p>$ hexo d或hexo deploy</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图10.png" alt="这里写图片描述"></p>
<p>如果在部署出现错误信息如果下: 请参考第5步，需要安装git插件<br>ERROR Deployer not found: git<br>以上两步可以使用一步就可以搞定：</p>
<p>$hexo g -d</p>
<p>【注】上述的部署指令中hexo deploy可以换成hexo server，两者的区别在于，前者是将博客部署到远程的Github上，而后者是运行在本地，通过<a href="http://localhost:4000在浏览器中访问。后者是为了调试配置方便而使用，但是最终本地博客还是需要hexo">http://localhost:4000在浏览器中访问。后者是为了调试配置方便而使用，但是最终本地博客还是需要hexo</a> deploy指令将其部署至Github上。<br>接下来就是查看是否成功啦。打开浏览器输入IP地址。</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC1%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/图11.png" alt="这里写图片描述"></p>
<center>图2</center>

<p>表明创建成功了。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第3章 Hexo博客域名添加</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/u013162035/article/details/80722367" target="_blank" rel="noopener">CSDN博客地址</a><br><a href="https://www.bilibili.com/video/av25128789" target="_blank" rel="noopener">B站配套视频</a></p>
<p>Hexo官方：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br>Hexo官方(中文)：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>
<p>前文笔者使用Hexo和GitHub搭建个人博客空间，使用markdown写博客既方便，展示出来的样式也还算满意，GitHub的域名有点长，还有就是访问速度比较慢，今天就试着把访问域名替换成自己的域名。废话不说，开干吧。</p>
<p><strong>1.申请个人域名</strong><br>首先得先拥有一个自己的域名，我用的是阿里云里买的一个以.cn为后缀的域名时送了一个.top结尾的域名，笔者已经使用了.cn结尾的域名，笔者买的期限是3年，也就一百一块，愿意花这个钱就继续往下看吧。<br>关于阿里云建站请看这篇文章：<a href="https://blog.csdn.net/u013162035/article/details/80722347" target="_blank" rel="noopener">https://blog.csdn.net/u013162035/article/details/80722347</a></p>
<p><strong>2.域名添加 DNS 解析</strong><br>github官网提供的主机ip地址：192.30.253.113。<br>域名查询：<a href="http://site.ip138.com/" target="_blank" rel="noopener">http://site.ip138.com/</a><br>但是我们要绑定自己的域名，就需要绑定自己的IP，可以通以下命令查看：</p>
<p><pre>$ping 你的用户名.github.io</pre><br> <img src="/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/图0.png" alt="这里写图片描述"><br>将这个作为主机地址，给域名的DNS解析添加记录。<br>登录阿里云，到域名列表，选择要绑定的域名。</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/图1.png" alt="这里写图片描述"></p>
 <center>图1域名选择</center>

<p>接下来，就是在【域名解析】中点击【添加记录】，添加两条记录，添加一个 A记录，然后再添加一个 CNAME记录主机地址填的是我们原本用来访问github博客的地址： githubname.github.io。</p>
<p>  <img src="/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/图2.png" alt="这里写图片描述"> </p>
 <center>图2域名解析添加记录 </center>

<p><strong>3.创建 CNAME 文件</strong><br>在hexo本地目录 source 目录下面新建一个文件，取名为 CNAME (无后缀)，内容就是上面所说到的自己的域名如下：</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/图3.png" alt="这里写图片描述"></p>
 <center>图3</center>

<p>运行hexo指令使配置修改起效：</p>
<p>$hexo g  //会在public中生成一个CNAME文件<br>$hexo d  //修改内容提交到github博客上</p>
<p><strong>4.测试</strong><br>假如设置成功，此时在浏览器中输入我们的域名可以看到网页啦。</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC3%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0/图4.png" alt="这里写图片描述"></p>
 <center>图4 </center>





]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第4章 同步到Coding</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/</url>
    <content><![CDATA[<p><strong>1.注册Coding.net账号</strong><br>Coding官网：<a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a><br>【注意】如果不想花钱的话要绑定腾讯云可以免费升级，笔者使用的是绑定腾讯云升级的。</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图1.png" alt="这里写图片描述"></p>
  <center>图1</center>

<p><strong>2.新建项目</strong><br>注意项目名与注册用的账户名一致，这里我用的是ouxiaolong。</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图2.png" alt="这里写图片描述"></p>
  <center>图2</center>

<p>  <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图3.png" alt="这里写图片描述"></p>
  <center>图3</center>

<p><strong>3.添加公钥</strong><br>上面设置完毕之后点击创建项目，然后点击设置-&gt;部署公钥-&gt;新建部署公钥，之前部署到Github上的时候，本地目录 C\User(中文为用户)(电脑用户名).ssh 目录下会有 id_rsa.pub 公钥文件，打开然后复制里面的内容，直接贴在这里的公钥框中。</p>
<p>   <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图4.png" alt="这里写图片描述"><br>  <center>图4</center></p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图5.png" alt="这里写图片描述"> </p>
  <center>图5</center>

<p>记得要勾选【授予推送权限】,否则在后面运行hexo d时会提示错误：<br>Coding.net Tips : [Deploy key is not allowed to push!]<br>fatal: Could not read from remote repository.<br>原因就是没有推送权限。<br>打开Git命令窗口Git shell，输入一下指令：<br>ssh -T git@git.coding.NET<br>假如出现以下输出结果，表示公钥绑定成功。<br> <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图9.png" alt="这里写图片描述"></p>
<p><strong>4.修改hexo配置</strong><br>打开hexo本地的配置文件 _config.yml，修改 deploy 的配置内容，这里设置了运行hexo d之后部署的目的地址，原本只有Github地址，现在添加多Coding.net的地址，其中BruceOu是注册该平台的用户名。<br> <img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图10.png" alt="这里写图片描述"><br>在source目录下新建一个文件，命名为Statifile，不带文件后缀。</p>
<p><strong>5.正式部署到Coding.net</strong><br>打开命令行窗口，定位到当前hexo项目的根目录下，运行以下指令将本地博客部署到Github和Coding.net上：<br>hexo g<br>hexo d</p>
<p><strong>6.设置Coding Page</strong><br>打开Coding.net的项目管理界面，打开代码-&gt;Pages服务，选择部署来源为master分支，然后保存即可。 </p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图6.png" alt="这里写图片描述"><br>  <center>图6</center></p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图7.png" alt="这里写图片描述"></p>
  <center>图7</center>

<p><strong>7.测试效果</strong><br>打开bruceou.coding.me访问我们的博客，刚配置完访问的时候出现404错误很正常，需要等待10分钟左右才能生效。</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC4%E7%AB%A0%20%E5%90%8C%E6%AD%A5%E5%88%B0Coding/图8.png" alt="这里写图片描述"></p>
  <center>图8</center>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第5章 Hexo图片显示问题</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC5%E7%AB%A0%20Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>笔者在使用Hexo搭建个人博客的过程中，发现使用链接（! [这里输入图片描述] (xxxx/图片名.jpg)）的方式引用图片，无法显示，如下图所示。笔者都差点放弃了使用github搭建个人博客。笔者最近找到了解决方案，于是记录下来，希望对朋友们有用。</p>
<center>![这里写图片描述](第5章 Hexo图片显示问题/图0.png)</center>

<p><strong>1.设置站点配置_config.yml</strong><br>post_asset_folder: true<br><img src="/2020/04/18/Hexo/%E7%AC%AC5%E7%AB%A0%20Hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/图1.png" alt="这里写图片描述"></p>
<p><strong>2.安装插件</strong></p>
<pre>npm install https://github.com/CodeFalling/hexo-asset-image --save</pre>
或
<pre>npm install hexo-asset-image --save</pre>
![这里写图片描述](第5章 Hexo图片显示问题/图2.png)
来源：https://github.com/CodeFalling/hexo-asset-image

**3.引用图片 **
运行hexo n "xxxx"来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。接下来就是利用makdown。
在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：

<pre>! [ 这里输入图片描述] ( xxxx/图片名.jpg )</pre>

<p>hexo g生成页面后，进入public文件中查看相关字段，可以发现，html标签内的语句是&lt; img src=”…xxxx/图片名.jpg”&gt;，而不是&lt; img src=”xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第2章 Hexo博客配置</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/u013162035/article/details/80721180" target="_blank" rel="noopener">CSDN博客地址</a><br><a href="https://www.bilibili.com/video/av25127685" target="_blank" rel="noopener">B站配套视频</a></p>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官方</a><br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官方(中文)</a><br><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next 主题</a></p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图1.png" alt="这里写图片描述"></p>
<center>图1</center>




<h2 id="2-1-Hexo页面添加及设置"><a href="#2-1-Hexo页面添加及设置" class="headerlink" title="2.1 Hexo页面添加及设置"></a>2.1 Hexo页面添加及设置</h2><p>默认有些页面是没有的，需要手动添加，进入博客文件夹，打开Git bash。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$hexo new page &quot;categories&quot;</span><br><span class="line">$hexo new page &quot;tags&quot; </span><br><span class="line">$hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure></p>
<p>编辑 tags/index.md 和categories/index.md和about/index.md分别添加如下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: &quot;about&quot;</span><br><span class="line">layout: &quot;about&quot;</span><br></pre></td></tr></table></figure></p>
<p>主题的 _config.yml 文件中的 menu 中进行匹配。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: &#x2F;    &#x2F;&#x2F;主页</span><br><span class="line">  Archives: &#x2F;archives   &#x2F;&#x2F;分类</span><br><span class="line">  categories: &#x2F;categories   &#x2F;&#x2F;归档</span><br><span class="line">  tags: &#x2F;tags      &#x2F;&#x2F;标签</span><br><span class="line">  about: &#x2F;about    &#x2F;&#x2F;关于</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2添加评论功能"><a href="#2-2添加评论功能" class="headerlink" title="2.2添加评论功能"></a>2.2添加评论功能</h2><p>来必力官网： <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br>没有账号的注册账号，打开来必力官网： <a href="https://livere.com，点击上方的安装，选择免费的city版本。" target="_blank" rel="noopener">https://livere.com，点击上方的安装，选择免费的city版本。</a></p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图2.png" alt="这里写图片描述"></p>
<center>图2</center>

<p><img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图3.png" alt="这里写图片描述"></p>
<center>图3</center>



<p>点击【申请获得代码】，进入下一步操作。<br>复制其中的uid字段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;lv-container&quot; data-id&#x3D;&quot;city&quot; data-uid&#x3D;&quot;MTAyMC8zNzMzMC8xMzg2NA&#x3D;&#x3D;&quot;&gt;</span><br><span class="line">	&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e &#x3D; d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j &#x3D; d.createElement(s);</span><br><span class="line">       j.src &#x3D; &#39;https:&#x2F;&#x2F;cdn-city.livere.com&#x2F;js&#x2F;embed.dist.js&#39;;</span><br><span class="line">       j.async &#x3D; true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &#39;script&#39;);</span><br><span class="line">	&lt;&#x2F;script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;&#x2F;noscript&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图4.png" alt="这里写图片描述"></p>
<center>图4</center>



<p>打开主题目录下的 blog/themes/某个主题/_config.yml 配置文件，定位到 livere_uid 字段，粘贴上刚刚复制的UID。</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图6.png" alt="这里写图片描述"></p>
<p>至此，大功告成。效果展示测试评论如图所示：</p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图5.png" alt="这里写图片描述"></p>
<center>图5</center>



<h2 id="2-3统计配置"><a href="#2-3统计配置" class="headerlink" title="2.3统计配置"></a>2.3统计配置</h2><p>笔者使用的是不蒜子统计<br>注意：此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后。<br><strong>    全局设置</strong></p>
<p>编辑主题配置文件中的busuanzi_count的配置项。<br>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。</p>
<p><strong>    站点UV设置</strong><br>当site_uv: true时，代表在页面底部显示站点的UV值。<br>site_uv_header和site_uv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。显示效果为[site_uv_header]UV值[site_uv_footer]。</p>
<p>//效果：本站访客数12345人次<br>site_uv: true<br>site_uv_header: 本站访客数<br>site_uv_footer: 人次</p>
<p><strong>    站点PV设置</strong><br>当site_pv: true时，代表在页面底部显示站点的PV值。<br>site_pv_header和site_pv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。显示效果为[site_pv_header]PV值[site_pv_footer]。</p>
<p>//效果：本站总访问量12345次<br>site_pv: true<br>site_pv_header: 本站总访问量<br>site_pv_footer: 次</p>
<p><strong>    单页面PV配置</strong><br>当page_pv: true时，代表在文章页面的标题下显示该页面的PV值（阅读数）。<br>page_pv_header和page_pv_footer为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。显示效果为[page_pv_header]PV值[page_pv_footer]。</p>
<p>//效果：本文总阅读量12345次<br>page_pv: true<br>page_pv_header: 本文总阅读量<br>page_pv_footer: 次</p>
<p> <img src="/2020/04/18/Hexo/%E7%AC%AC2%E7%AB%A0%20Hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/图7.png" alt="这里写图片描述"></p>
<h2 id="2-4搜索配置"><a href="#2-4搜索配置" class="headerlink" title="2.4搜索配置"></a>2.4搜索配置</h2><p>笔者使用的是Local Search，添加百度/谷歌/本地 自定义站点内容搜索。<br><strong>一、安装 hexo-generator-searchdb</strong><br>在站点的根目录下执行以下命令：</p>
<p>$ npm install hexo-generator-searchdb —save</p>
<p><strong>二、编辑站点配置文件，新增以下内容到任意位置</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p>
<p><strong>三、编辑主题配置文件，启用本地搜索功能</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《WEB开发-HEXO博客搭建》第6章 Hexo 中支持 Mathjax</title>
    <url>/2020/04/18/Hexo/%E7%AC%AC6%E7%AB%A0%20Hexo%20%E4%B8%AD%E6%94%AF%E6%8C%81%20Mathjax/</url>
    <content><![CDATA[<p>在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。</p>
<p><strong>第一步： 使用Kramed代替 Marked</strong></p>
<p>hexo 默认的渲染引擎是 marked，但是 marked 不支持 mathjax。 kramed 是在 marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 kramed.<br>npm uninstall hexo-renderer-marked —save<br>npm install hexo-renderer-kramed —save</p>
<p>然后，更改/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">'$$$$$1$$$$'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>为：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2020/04/18/Hexo/%E7%AC%AC6%E7%AB%A0%20Hexo%20%E4%B8%AD%E6%94%AF%E6%8C%81%20Mathjax/tt1.png" alt="在这里插入图片描述"></p>
<p><strong>第二步: 停止使用 hexo-math</strong><br>首先，如果你已经安装 hexo-math, 请卸载它：<br>npm uninstall hexo-math —save</p>
<p>然后安装 hexo-renderer-mathjax 包：<br>npm install hexo-renderer-mathjax —save</p>
<p><strong>第三步: 更新 Mathjax 的 CDN 链接</strong><br>首先，打开/node_modules/hexo-renderer-mathjax/mathjax.html<br>然后，把<script>更改为：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>第四步: 更改默认转义规则</strong><br>因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 <em>, 所以我们需要对默认的规则进行修改.<br>首先， 打开node_modules\kramed\lib\rules\inline.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><br>更改为:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><br>把<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><br>更改为:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><br> <img src="第6章 Hexo 中支持 Mathjax/tt2.png" alt="在这里插入图片描述"></p>
<p><strong>第五步: 开启mathjax</strong><br>在主题 _config.yml 中开启 Mathjax， 找到 mathjax 字段添加如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></p>
<p> <img src="第6章 Hexo 中支持 Mathjax/tt3.png" alt="在这里插入图片描述"></p>
<p>这一步可选，在博客中开启 Mathjax，， 添加以下内容：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Testing Mathjax with Hexo</span><br><span class="line">category: Uncategorized</span><br><span class="line">date: 2017/05/03</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。</p>
</script></p>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
